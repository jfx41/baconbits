#!/bin/bash

#
# Initialize and install BaconBits
#
function bb_init {
	# Check for Oinkcode
	if [ $# -ne 1 ]
	then
		echo "ERROR: Initialization requires an Oinkcode!  Try: $0 help init"
		exit 1
	fi

	echo "Beginning BaconBits initialization ..."
	bb_init_shim   # Install shell specific shims
	bb_init_dirs   # Create directory structure

	exit 0
}

#
# Initializes the BaconBits local directory structure for the user
#
function bb_init_dirs {
	# If the base directory doesn't exist, create it
	if [ ! -d $BACONBITS_DIR ]
	then
		printf "\t* Creating: $BACONBITS_DIR\n"
		mkdir $BACONBITS_DIR
	fi

	# We will try and gracefully handle partially initialized directories
	for dir in $BACONBITS_DIRS
	do
		dir2=$BACONBITS_DIR/$dir
		if [ ! -d $dir2 ]
		then
			printf "\t\t* $dir2"
			mkdir -p $dir2
		fi
		echo
	done

	return
}

#
# Shim either bash or zsh
#
function bb_init_shim {
	shell=$(basename $SHELL)

	if [ $shell == "bash" ]
	then
		bb_shim_bash $1
	elif [ $shell == "zsh" ]
	then
		bb_shim_zsh $1
	else
		echo "ERROR: Unsupported shell '$shell'" > /dev/stderr
		exit 0
	fi
}

#
# Add the Oinkcode to the bash shell environment
#
function bb_shim_bash {
	cat <<EOS >> $HOME/.bash_profile

# BaconBits Oinkcode ENV variable
export BACONBITS_OINKCODE=$1

EOS

	return 0
}

#
# Add the Oinkcode to the zsh shell environment
#
function bb_shim_zsh {
	cat <<EOS >> $HOME/.zprofile

# BaconBits Oinkcode ENV variable
export BACONBITS_OINKCODE=$1

EOS

	return 0
}

# EOF
