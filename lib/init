#!/bin/bash

#
# Initialize and install BaconBits
#
function bb_init {
	# Check for Oinkcode
	if [ $# -ne 1 ]
	then
		echo "ERROR: Initialization requires an Oinkcode!  Try: $0 help init"
		exit 1
	fi

	echo "Beginning BaconBits initialization ..."
	bb_init_shim $1  # Install shell specific shims
	bb_init_dirs     # Create directory structure
	echo "Initialization complete!"

	exit 0
}

#
# Initializes the BaconBits local directory structure for the user
#
function bb_init_dirs {
	# If the base directory doesn't exist, create it
	if [ ! -d $BACONBITS_DIR ]
	then
		printf "\t* Creating: $BACONBITS_DIR\n"
		mkdir $BACONBITS_DIR
	fi

	# We will try and gracefully handle partially initialized directories
	for dir in $BACONBITS_DIRS
	do
		dir2=$BACONBITS_DIR/$dir
		if [ ! -d $dir2 ]
		then
			printf "\t\t* $dir2"
			mkdir -p $dir2
			echo
		fi
	done

	return
}

#
# Shim either bash or zsh
#
function bb_init_shim {
	shell=$(basename $SHELL)

	printf "\t* Installing Oinkcode into .${shell}rc\n"
	if [ $shell == "bash" ]
	then
		bb_shim_bash $1
	elif [ $shell == "zsh" ]
	then
		bb_shim_zsh $1
	else
		printf "\tERROR: Unsupported shell '$shell'\n" > /dev/stderr
		exit 0
	fi
}

#
# Add the Oinkcode to the bash shell environment
#
function bb_shim_bash {
	rc="$HOME/.bashrc"
	check=$(grep BACONBITS_OINKCODE $rc)

	# If one doesn't already exist
	if [ -z "$check" ]
	then
		cat <<EOS >> $rc

# BaconBits Oinkcode ENV variable
export BACONBITS_OINKCODE=$1

EOS
	else
		echo "BACONBITS_OINKCODE found in $rc" > /dev/stderr
	fi

	return 0
}

#
# Add the Oinkcode to the zsh shell environment
#
function bb_shim_zsh {
	rc="$HOME/.zshrc"
	check=$(grep BACONBITS_OINKCODE $rc)

	# If one doesn't already exist
	if [ -z "$check" ]
	then

		cat <<EOS >> $rc

# BaconBits Oinkcode ENV variable
export BACONBITS_OINKCODE=$1

EOS
	else
		echo "BACONBITS_OINKCODE found in $rc" > /dev/stderr
	fi

	return 0
}

# EOF
